;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; This is the configuration file required by XookSuut3D.
; 
; Some variables are deactivated by default.
; To activate a variable remove the starting semicolon and proceed to edit it.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Cube header information
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[header]
; XS3D expects as input a datacube consisting of two spatial axes, and one
; spectral axis (Z-axis).
; XS3D will read from the datacube the following keywords:
; CD1_1 & CD2_2 or CDELT1 & CDELT2 -> Spatial information
; CD3_3 or CDELT3, and CRVAL3 -> Spectral information

; XS3D will try to infer the spectral type based on the header information,
; i.e., from ctype3 or cunit3.
; If ctype3 information is not found then you MUST specify it here. Otherwise
; the code does not know how to covert the spectral axis to velocity, measured
; in km/s.
; ctype3 can be `lambda` , `freq`.
; In case the spectral type is velocity, you must choose between `velocity_ms` (i.e., m/s)
; or `velocity_kms` (i.e., km/s). (dtype str) 
;ctype3=false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Some general configurations prior the fitting
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[general]
; Specify the number of cores to use. (dtype int)
;nthreads=2

; If you analyse multiple objects from the same dataset (i.e., ALMA, MUSE,
;etc)  you can specify it here.   (dtype str)
;dataset = -

; Where the models will be stored.
;output_directory = ./

; Number of iterations. Depretiated argument.
;n_it=1
; Clipping, clip the cube by n-times the cube rms. A clipping level
; of 6 is most of the times an excelent choice. (dtype float)
;clip=6
; Rest frame of spectral line in same units as the cube spectral axis, i.e., Angstrom,
; Hz, mu, etc.
eline = 6562.68
; If the point spread function (PSF) information is not recorded in the cube header,
; then you can pass them here. HERE, PSF units must be in arcseconds and represents
; the spatial resolution at FWHM.
;psf_fwhm = 2.5
; Beam position angle (dtype deg).
;bpa=0
; Major and minor axes of the beam in arcsec (dtype float). If `psf_fwhm` is not None,
; then bmaj=bmin=psf_fwhm/2. Otherwise you can input your values; in such a case
; `psf_fwhm` is ignored.
;bmaj=psf_fwhm/2
;bmin=psf_fwhm/2
; Wheter the velocity dispersion is fitted (dtype boolean).
fit_dispersion=true
; Instrumental resolution/broadening (at FWHM) in same units as the cube spectral axis,
; i.e., Angstrom, Hz, mu, etc., (dtype float).
fwhm_inst=6
; Optionally, you can pass the resolution/broadening (at FWHM) in km/s. (dtype float).
; If this is the case, the entrance `fwhm_inst` will be ignored.
;fwhm_kms=None
; Cut channels from the cube along spectral axis, from wmin to wmax. Where wmin,wmax
; have same units as the cube spectral axis, i.e., Angstrom, Hz, mu, etc. (dtype float).
;wmin=None
;wmax=None
; If your data has not been removed from continuum emission, you can try to remove it
; (dtype boolean).
;baseline=false

; PSF and LSF, if passed, they are always taken into consideration for constructing the
; model datacube.
; However, the minimization can take place from 3D (e.g., cubes) or 2D (e.g., moment maps).
; Fitting from maps is much faster than fitting from cubes.
; In the former, the residuals, or cost function, to be minimized are defined as follows:
; cost = (mom1_obs-mom1_model)**2 + (mom2_obs-mom2_model)**2
; while in the 	latter:
; cost = (obs_cube-model_cube)**2
; By default the fiting is performed on moment maps, otherwise set `fit_from_cube=true`.
; (dtype boolean).
;fit_from_cube=false

; v_center (in km/s) defines the velocity of the circular component v_t at the
; kinematic centre (i.e.,  v0 at r0 = 0). it can take a float value, although it
; is usually asummed that the kinematic centre does not rotate (i.e., v_center = 0).
; v_center can also be estimated by extrapolatig the first two pair of velocities
; (r1,v1) and (r2,v2) to (r0=0,v0). In such a case set ´v_center = extrapolate´.
; v_center is never estimated in a LeastSquare sence, it adopts the value passed
; by the user.
; 	Note 1: If v_center is set to a float number different from zero, this will
;	only apply for the circular model. 
; 	Note 2: If v_center is not zero (i.e., ´v_center = extrapolate´, or a float
;	number), this apply for all models. 
;v_center = 0


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; High redshift objects
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; At high redshifts, it is common to place the zero point of the velocity frame
; into the source by redshifting the rest wavelength/frequency of the line
; (dtype float).
[high_z]
;redshift=0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Bootrap analysis configuration
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[bootstrap]
; If you want to estimate errors on parameters via bootstrap then set the number of
; bootstraps to perform (dtype int)
;Nboots = 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Configuration of constant parameters
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; If you want to constrain and therefore have more control on the fitting parameters,
; then you can change the inputs as desired. Most of the time this is not required !
; units: PA (deg), INC (deg), X0 (pixel), Y0 (pixel), PHI_BAR (deg), VSYS (km/s)

[constant_params]

;FIT_PA = true
;PA = 50
;MIN_PA = 0
;MAX_PA = 360

;FIT_INC = true
;INC = 50
;MIN_INC = 25
;MAX_INC = 80

;FIT_X0 = true
;X0 = 0
;MIN_X0 = 0
;MAX_X0 = NX

;FIT_Y0 = true
;Y0 = 0
;MIN_Y0 = 0
;MAX_Y0 = NY

;FIT_PHI_BAR = true
;PHI_BAR = 45
;MIN_PHI_B = 0
;MAX_PHI_B = 180

;FIT_VSYS = true
;VSYS = 0
;MIN_VSYS = 0
;MAX_VSYS = 300000


; Weighting function: |cos theta|^WEIGHT. (dtype int)
; If WEIGHT = 0,  a constant weight is applied.
; if WEIGHT = 1, values close the major axis are more weighted.
;WEIGHT=0


; Convergency (dtype float).
;XTOL=1E-5
; Number of maximum function evaluations during LeastSquares,  (dtype int).
;MAXF=15

[others]
; How velocity is defined along the spectral axis.
; For wavelength-type spectral axis, it is adopted the optical defintion of velocity:
; 		v_opt = speed_light * (lambda_observed - lambda_rest) / lambda_rest (DEFAULT `opt`)
; For frequency-type it is adopted the radio definition of velocity: 
;		v_rad = speed_light * (frec_rest - freq_obs) / freq_rest            (DEFAULT `rad`)
; Alternatively, the optical definition for frequency-type spectral axis is defined as:
;		v_opt = speed_light * (frec_rest - freq_obs) / freq_obs
; Following, set vdoppler to `opt` or `rad`. The default value depend on the spectral type (ctype3),
; as mentioned before. (dtype str) 		
;vdoppler = None

; How velocity is obtained from the datacube. The default is through 1st moment map.
; Optionally, velocities can be computed from the peak of the emission line, by fitting a second order
; polynomial (parabola) to the peak and the two adjacent points. (dtype boolean)
; vpeak = false

; In extragalactic objects the distance is computed from the Luminosity distance associated to the
; redshift (z=vsys/speed_light). For objects in our Galaxy, the distance must be passed for
; computing the scale bar. Units: distance (pc) (dtype float).
; distance = 0
